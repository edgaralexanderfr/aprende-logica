<?php    /**   * Copyright 2014 - Edgar Alexander Franco.   *   * @author Edgar Alexander Franco   * @version 1.0.0   */    require_once $_SERVER['DOCUMENT_ROOT'] . $_SERVER['SITE_PATH'] . 'system/class.JSONCache.php';    class Homework {    const MIN_ID = 1;    const MAX_ID = 999999999999999999;    const TIME_PER_HOMEWORK = 86400;    const HOMEWORKS_PER_TIME = 3;    const CORRECTED = 1;    const UNCORRECTED = 0;        public static $PATH;    public static $ALLOWED_TYPES = array(      'pdf' => 'application/pdf',       'docx' => 'application/zip',       'doc' => 'application/msword'    );        public static $mysqli;    public $id;    public $userId;    public $htype;    public $sendDate;    public $corrected;        /**     * Set and validate the id.     *     * @param {int} $id ID of the homework     */    public final function setId ($id) {      if (!is_numeric($id) || $id < self :: MIN_ID || $id > self :: MAX_ID) {        throw new Exception('ID inválido.', 1);      }            $this->id = (int) $id;    }        /**     * Send the user's homework.     *     * Purges cache: homework_get_pages, homework_get_uncorrected     *     * @param $file {array} Homework itself.     */    public final function send ($file) {      $errno = $file['error'];            if ($errno == UPLOAD_ERR_INI_SIZE) {        throw new Exception('Tu tarea es demasiado grande.', 1);      }            if ($errno == UPLOAD_ERR_NO_FILE) {        throw new Exception('No has adjuntado tu tarea.', 2);      }            if ($errno != UPLOAD_ERR_OK) {        throw new Exception('No se pudo enviar tu tarea.', 3);      }            $extension = pathinfo($file['name'], PATHINFO_EXTENSION);            if (!isset(self :: $ALLOWED_TYPES[ $extension ])) {        throw new Exception('Extensión de archivo no válida.', 4);      }            $tmp = $file['tmp_name'];      $type = @mime_content_type($tmp);            if ($type === false) {        throw new Exception('No se pudo extraer información del archivo.', 5);      }            if ($type != self :: $ALLOWED_TYPES[ $extension ]) {        throw new Exception('Tipo de archivo no admitido.', 6);      }            $this->htype = '.' . $extension;            $mysqli = self :: $mysqli;            $htype = mysqli_real_escape_string($mysqli, $this->htype);            $query = mysqli_query($mysqli, "call homework_send(" . $this->userId . ", '" . $htype . "', " . self :: TIME_PER_HOMEWORK . ", " . self :: HOMEWORKS_PER_TIME . ")");            if (!$query) {        throw new Exception('Error de base de datos.', 7);      }            $data = mysqli_fetch_assoc($query);      mysqli_free_result($query);            if ($data['errno'] == 1) {        throw new Exception('Ya has enviado demasiadas tareas por hoy.', 8);      }            $this->id = $data['id'];      @move_uploaded_file($tmp, self :: $PATH . $this->id);            JSONCache :: purge('homework_get_pages/');      JSONCache :: purge('homework_get_uncorrected/');    }        /**     * Return the number of pages of homeworks.     *     * Cache reference: homework_get_pages     *     * @param {int} $interval Max. number of records that the query must return     * @return {array}     */    public static function getPages ($interval) {      $cacheRef = 'homework_get_pages/';      $query = 'call homework_get_pages()';      $data = JSONCache :: get($query, $cacheRef);            if ($data === null) {        $mysqli = self :: $mysqli;        $mysqliQuery = mysqli_query($mysqli, "call homework_get_pages()");                if (!$mysqliQuery) {          throw new Exception('Error de base de datos.', 1);        }                $data = mysqli_fetch_assoc($mysqliQuery);        mysqli_free_result($mysqliQuery);                JSONCache :: store($query, $data, $cacheRef);      }            $corrected = $data['corrected'];      $uncorrected = $data['uncorrected'];            return array(        'corrected_pages' => ($corrected == 0) ? '1' : ceil($corrected / $interval) ,         'uncorrected_pages' => ($uncorrected == 0) ? '1' : ceil($uncorrected / $interval)      );    }        /**     * Return the homeworks.     *     * @param {int} $from Start ID     * @param {int} $to End ID     * @param {int} $corrected Specifies which homeworks to get     * @return {array}     */    public static function get ($from, $to, $corrected) {      $mysqli = self :: $mysqli;      $query = mysqli_query($mysqli, "call homework_get(" . $from . ", " . $to . ", " . $corrected . ")");            if (!$query) {        throw new Exception('Error de base de datos.', 1);      }            $homeworks = array();            while ($row = mysqli_fetch_assoc($query)) {        $homeworks[] = $row;      }            mysqli_free_result($query);            return $homeworks;    }        /**     * Return the corrected homeworks.     *     * Cache reference: homework_get_corrected     *     * @param {int} $page Number of the page     * @param {int} $interval Number of records to fetch     * @param {array}     */    public static function getCorrected ($page, $interval) {      if (!is_numeric($page) || $page < 1) {        throw new Exception('Página inválida.', 1);      }            $cacheRef = 'homework_get_corrected/';      $from = ((int) $page - 1) * $interval;      $query = 'call homework_get(' . $from . ', ' . $interval . ', 1)';      $data = JSONCache :: get($query, $cacheRef);            if ($data === null) {        $data = self :: get($from, $interval, self :: CORRECTED);                JSONCache :: store($query, $data, $cacheRef);      }            return $data;    }        /**     * Return the uncorrected homeworks.     *     * Cache reference: homework_get_uncorrected     *     * @param {int} $page Number of the page     * @param {int} $interval Number of records to fetch     * @param {array}     */    public static function getUncorrected ($page, $interval) {      if (!is_numeric($page) || $page < 1) {        throw new Exception('Página inválida.', 1);      }            $cacheRef = 'homework_get_uncorrected/';      $from = ((int) $page - 1) * $interval;      $query = 'call homework_get(' . $from . ', ' . $interval . ', 0)';      $data = JSONCache :: get($query, $cacheRef);            if ($data === null) {        $data = self :: get($from, $interval, self :: UNCORRECTED);                JSONCache :: store($query, $data, $cacheRef);      }            return $data;    }        /**     * Update whether the homework is corrected or not     *     * Purges cache: homework_get_pages, homework_get_corrected, homework_get_uncorrected     *     * @param {number} $corrected Status of the homework     */    public final function setCorrected ($corrected) {      $mysqli = self :: $mysqli;      $query = mysqli_query($mysqli, "call homework_set_corrected(" . $this->id . ", " . $corrected . ")");            if (!$query) {        throw new Exception('Error de base de datos.', 1);      }            JSONCache :: purge('homework_get_pages/');      JSONCache :: purge('homework_get_corrected/');      JSONCache :: purge('homework_get_uncorrected/');    }        /**     * Mark the homework as corrected.     */    public final function correct () {      $this->setCorrected(1);    }        /**     * Mark the homework as uncorrected.     */    public final function uncorrect () {      $this->setCorrected(0);    }        /**     * Download the homework through it's ID.     *     * Cache reference: homework_download     */    public final function download () {      $cacheRef = 'homework_download/';      $query = 'call homework_download(' . $this->id . ')';      $data = JSONCache :: get($query, $cacheRef);            if ($data === null) {        $mysqli = self :: $mysqli;        $mysqliQuery = mysqli_query($mysqli, "call homework_download(" . $this->id . ")");                if (!$mysqliQuery) {          throw new Exception('Error de base de datos.', 1);        }                $data = ($row = mysqli_fetch_assoc($mysqliQuery)) ? $row : array() ;        mysqli_free_result($mysqliQuery);                JSONCache :: store($query, $data, $cacheRef);      }            if ($data == null) {        throw new Exception('Tarea no encontrada.', 2);      }            $this->id = (int) $data['id'];      $cedula = $data['cedula'];      $this->htype = $data['htype'];      $this->sendDate = $data['send_date'];            $dt = new DateTime($this->sendDate, new DateTimeZone($_SERVER['IN_DTZ']));      $dt->setTimezone(new DateTimeZone($_SERVER['OUT_DTZ']));      $df = $dt->format('d.m.Y h.i a');      $name = 'Tarea ' . $this->id . ' - ' . $cedula . ' - ' . $df . ' - Aprende Lógica' . $this->htype;      $path = self :: $PATH . $this->id;      $size = @filesize($path);            if ($size === false) {        throw new Exception('No se pudo extraer información del archivo.', 3);      }            header('Content-Description: File Transfer');			header('Content-Type: application/octet-stream');			header('Content-Disposition: attachment; filename=' . $name);			header('Content-Transfer-Encoding: binary');			header('Expires: 0');			header('Cache-Control: must-revalidate, post-check=0, pre-check=0');			header('Pragma: public');			header('Content-Length: ' . $size);            if (@readfile($path) === false) {        throw new Exception('No se pudo leer el archivo.', 4);      }    }  }    Homework :: $PATH = $_SERVER['DOCUMENT_ROOT'] . $_SERVER['SITE_PATH'] . 'blog/homeworks/';